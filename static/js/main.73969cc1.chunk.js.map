{"version":3,"sources":["components/Header.js","components/AddPortfolio.js","components/AddStock.js","components/PortfolioChart.js","components/Portfolio.js","App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","reactstrap_es","color","Component","AddPortfolio","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","modal","toggle","bind","assertThisInitialized","setState","_this2","_this$props","portfolioName","handlePortfolioName","createPortfolio","className","onClick","isOpen","type","placeholder","value","onChange","AddStock","stockName","stockAmount","handleStockName","addStock","index","name","style","textTransform","PortfolioChart","getStocks","id","lineData","data","datasets","portfolios","stocks","map","item","axios","get","concat","then","res","dates","keys","rate","values","Number","update","labels","$set","reverse","originalLabels","Math","random","toString","substring","some","eachItem","label","push","backgroundColor","borderColor","borderWidth","fill","pointRadius","catch","e","console","log","handleChange","defineProperty","target","filterChart","startDate","endDate","alert","Date","start","indexOf","end","newDates","slice","nextProps","closeBtn","xs","close","es","height","options","maintainAspectRatio","fontWeight","marginRight","Portfolio","portfolio","newPortfolio","isEuro","removePortfolio","i","splice","toUpperCase","unitValue","total","parseFloat","toFixed","stock","totalValue","toggleButton","selectedStock","selectedStocks","includes","removeSelectedStocks","newStocks","filter","countValue","reduce","num","exchangeRate","currencyObj","_this3","lg","key","borderRadius","window","confirm","bordered","stockItem","components_AddStock","components_PortfolioChart","components_AddPortfolio","App","components_Header","fluid","components_Portfolio","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.73969cc1.chunk.js","sourcesContent":["import React, {Component} from 'react'\r\nimport {\r\n    Navbar,\r\n    NavbarBrand} from 'reactstrap'; \r\n\r\n\r\nclass Header extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color=\"dark\" >\r\n                    <NavbarBrand>Stock Manager</NavbarBrand>\r\n                </Navbar>\r\n            </div>\r\n        )\r\n    }    \r\n}\r\n\r\nexport default Header;\r\n","import React, {Component} from 'react'\r\nimport {Button, Modal, ModalHeader, ModalFooter, ModalBody} from 'reactstrap'\r\n\r\nclass AddPortfolio extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n    \r\n    toggle() {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n        });\r\n    }\r\n    render() {\r\n        const {portfolioName, handlePortfolioName, createPortfolio} = this.props\r\n        return (\r\n            <div>\r\n                <Button color=\"primary\" className=\"add-portfolio\" onClick={this.toggle}>Add Portfolio</Button>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader toggle={this.toggle}>Create new Portfolio</ModalHeader>\r\n                    <ModalBody>\r\n                        <input \r\n                            type=\"text\" \r\n                            className=\"form-control\"\r\n                            placeholder=\"Portfolio Name\"\r\n                            value={portfolioName}\r\n                            onChange={handlePortfolioName}\r\n                        />\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Close</Button>{' '}\r\n                        <Button color=\"primary\" onClick={()=>createPortfolio(this.toggle)}>Create</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddPortfolio\r\n","import React, {Component} from 'react'\r\nimport {Button, Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap'\r\n\r\nclass AddStock extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n        };\r\n    \r\n        this.toggle = this.toggle.bind(this);\r\n    }\r\n    \r\n    toggle() {\r\n        this.setState({\r\n            modal: !this.state.modal,\r\n        });\r\n    }\r\n    render() {\r\n        const {stockName, stockAmount, handleStockName, addStock, index} = this.props;\r\n        return (\r\n            <div>\r\n                <div><Button color=\"primary\" className=\"add-portfolio\" onClick={this.toggle}>Add Stock</Button></div>\r\n                <Modal isOpen={this.state.modal} toggle={this.toggle} className={this.props.className}>\r\n                    <ModalHeader toggle={this.toggle}>Add stock</ModalHeader>\r\n                    <ModalBody>\r\n                        <form>\r\n                            <div>\r\n                                <label><h6>Stock Name</h6></label>\r\n                                <input \r\n                                    type=\"text\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"Example: NOK or Msft...\"\r\n                                    name=\"stockName\"\r\n                                    style={{textTransform: 'uppercase'}}\r\n                                    value={stockName}\r\n                                    onChange={handleStockName}\r\n                                />\r\n                            </div>\r\n                            <div>\r\n                                <label><h6>Stock Amount</h6></label>\r\n                                <input \r\n                                    type=\"number\" \r\n                                    className=\"form-control\" \r\n                                    placeholder=\"0\" \r\n                                    name=\"stockAmount\"\r\n                                    value={stockAmount}\r\n                                    onChange={handleStockName}\r\n                                />\r\n                            </div>\r\n                        </form>\r\n                    </ModalBody>\r\n                    <ModalFooter>\r\n                        <Button color=\"secondary\" onClick={this.toggle}>Close</Button>{' '}\r\n                        <Button color=\"primary\" onClick={()=>addStock(index, this.toggle)}>Create</Button>\r\n                    </ModalFooter>\r\n                </Modal>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default AddStock\r\n","import React, {Component} from 'react';\r\nimport {Button, Row, Col,Modal, ModalHeader, ModalBody, ModalFooter} from 'reactstrap';\r\nimport {Line} from 'react-chartjs-2';\r\nimport axios from 'axios';\r\nimport update from 'immutability-helper'\r\n\r\n\r\nclass PortfolioChart extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            modal: false,\r\n            portfolios: [],\r\n            data: {\r\n                originalLabels: [],\r\n                labels: [],\r\n                datasets: [],\r\n            },\r\n            startDate: null,\r\n            endDate: null,\r\n        }\r\n    }\r\n\r\n    // toggling the chat modal\r\n      toggle = ()=> {\r\n          this.setState({\r\n              modal: !this.state.modal,\r\n          });\r\n        \r\n      }\r\n\r\n      // receiving props from parent component\r\n      UNSAFE_componentWillReceiveProps(nextProps){\r\n          this.setState({\r\n              portfolios: nextProps.portfolios,\r\n          })\r\n      }\r\n\r\n      //get stocks from the state and using that state to call the api with stock values like dates and pushing those values in the state\r\n      getStocks = (id)=>{          \r\n          let lineData = this.state.data.datasets;\r\n          this.state.portfolios[id].stocks.map(item=>(\r\n              axios.get(`https://www.alphavantage.co/query?function=TIME_SERIES_DAILY&symbol=${item.stockName}&outputsize=full&apikey=EVNDD17OHUNAZIMD`)\r\n                  .then(res=>{\r\n                      const data = res.data['Time Series (Daily)'];\r\n                      const dates = Object.keys(data);\r\n                      const values = Object.values(data);\r\n                      const rate = values.map(item=> Number(item['1. open']))\r\n\r\n\r\n                      this.setState({\r\n                          data: update(this.state.data, {\r\n                              labels: {\r\n                                  $set: dates.reverse(),                                  \r\n                              },\r\n                              originalLabels: {\r\n                                  $set: dates,\r\n                              },\r\n                          }),\r\n                      })\r\n                      \r\n\r\n                      let color = '#' + (Math.random().toString(16) + '000000').substring(2,8);\r\n                      const found = lineData.some(eachItem=>eachItem.label === item.stockName);\r\n                      if(found === false){\r\n                          lineData.push({\r\n                              label: item.stockName,\r\n                              data: rate.reverse(),\r\n                              backgroundColor: color,\r\n                              borderColor: color,\r\n                              borderWidth: 2,\r\n                              fill: false,\r\n                              pointRadius: 0,\r\n                          })\r\n                      }\r\n                     \r\n                      this.setState({\r\n                          data: update(this.state.data, {\r\n                              datasets: {\r\n                                  $set: lineData,\r\n                              },\r\n                          }),\r\n                      })\r\n\r\n                      \r\n\r\n                  })\r\n                  .catch(e=>console.log(e))\r\n          )\r\n          )  \r\n          \r\n          this.toggle()\r\n      }\r\n\r\n      // function for handling the changes for date inputs\r\n      handleChange = (e)=>{\r\n          this.setState({\r\n              [e.target.name]: e.target.value,\r\n          })\r\n      }\r\n\r\n      // filter the chat according to the dates provided\r\n      filterChart = ()=>{\r\n          let dates = this.state.data.originalLabels;\r\n          const startDate = this.state.startDate;\r\n          const endDate = this.state.endDate;\r\n          if(startDate === null || endDate === null){\r\n              alert('Please enter the date')\r\n          } else if(new Date(startDate) > new Date(endDate)){\r\n              alert('Start date must be less than end date')\r\n          } else if(new Date(endDate) > new Date()){\r\n              alert('End date cannot be present or after today')\r\n          }\r\n          else{\r\n              const start = dates.indexOf(startDate);\r\n              const end = dates.indexOf(endDate);\r\n            \r\n              let newDates = dates.slice(start, end + 1)\r\n              this.setState({\r\n                  data: update(this.state.data, {\r\n                      labels: {\r\n                          $set: newDates,\r\n                      },\r\n                  }),\r\n              })\r\n          }\r\n      }\r\n      render() {\r\n          const {id} = this.props;\r\n          const closeBtn = <button className=\"close\" onClick={this.toggle}>&times;</button>;\r\n          return (        \r\n              <Row>\r\n                  <Col xs=\"12\">\r\n                      <Button color=\"info\" onClick={()=>this.getStocks(id)}>Perf Graph</Button>\r\n                      <Modal \r\n                          isOpen={this.state.modal}\r\n                          toggle={this.toggle}\r\n                          className=\"modal-size\"\r\n                      >\r\n                          <ModalHeader toggle={this.toggle} close={closeBtn}>Perf Chart</ModalHeader>\r\n                          <ModalBody>\r\n                              <Line\r\n                                  data={this.state.data}\r\n                                  height={400}\r\n                                  options={{\r\n                                      maintainAspectRatio: false,\r\n                                  }}\r\n                              />\r\n                          </ModalBody>\r\n                          <ModalFooter>\r\n                              <span style={{'fontWeight': 'bold'}}>Start date:</span>\r\n                              <input type=\"date\" name=\"startDate\" style={{'marginRight': '10px'}} onChange={this.handleChange} />\r\n                              <span style={{'fontWeight': 'bold'}}>End Date:</span>\r\n                              <input type=\"date\" name=\"endDate\" onChange={this.handleChange}/>\r\n                              <Button color=\"primary\" onClick={this.filterChart}>Filter</Button>{' '}\r\n                              <Button color=\"secondary\" onClick={this.toggle}>Close</Button>\r\n                          </ModalFooter>                        \r\n                      </Modal>\r\n                  </Col>\r\n              </Row>\r\n          )\r\n      }\r\n}\r\n\r\nexport default PortfolioChart\r\n","import React, {Component} from 'react'\r\nimport AddPortfolio from './AddPortfolio'\r\nimport {Col, Row, Button, Table} from 'reactstrap'\r\nimport Addstock from './AddStock'\r\nimport PortfolioChart from './PortfolioChart'\r\nimport axios from 'axios'\r\nimport update from 'immutability-helper';\r\n\r\nclass Portfolio extends Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            portfolioName: '',\r\n            stockName: '',\r\n            stockAmount: 1,\r\n            portfolios: [],\r\n            exchangeRate: '',\r\n            selectedStocks: [],\r\n        }\r\n    }\r\n\r\n    //get the exchange rate from usd to euro on initial loading\r\n    UNSAFE_componentWillMount() {\r\n        axios\r\n            .get(\r\n                `https://www.alphavantage.co/query?function=CURRENCY_EXCHANGE_RATE&from_currency=USD&to_currency=EUR&apikey=EVNDD17OHUNAZIMD`\r\n            )\r\n            .then(res => {\r\n                const exchangeObj = res.data['Realtime Currency Exchange Rate'];\r\n                const currencyObj = exchangeObj['5. Exchange Rate'];\r\n                this.setState({\r\n                    exchangeRate: currencyObj,\r\n                });\r\n            });\r\n    }\r\n\r\n    \r\n    handlePortfolioName = (e)=>{\r\n        this.setState({\r\n            portfolioName: e.target.value,\r\n        })\r\n\r\n    }\r\n    handleStockName = (e)=>{\r\n        this.setState({\r\n            [e.target.name]: e.target.value,\r\n        })\r\n    }\r\n\r\n    //creates new portfolio\r\n    createPortfolio = (toggle)=>{\r\n        if(this.state.portfolioName === ''){\r\n            alert('Portfolio name cannot be empty')\r\n        } else{\r\n            const portfolio = this.state.portfolios;\r\n            const newPortfolio = {\r\n                name: this.state.portfolioName,\r\n                isEuro: true,\r\n                stocks: [],\r\n            }\r\n            portfolio.push(newPortfolio)\r\n            this.setState({\r\n                portfolioName: '',\r\n                portfolios: portfolio,\r\n            })\r\n            toggle();\r\n\r\n        }\r\n    }\r\n    //removes the portfolio\r\n    removePortfolio = (i)=>{\r\n        let portfolios = this.state.portfolios;\r\n        portfolios.splice(i, 1);\r\n        this.setState({\r\n            portfolios,\r\n        })\r\n    }\r\n\r\n    //gets the stocks value from api and add to the related portfolio\r\n    addStock = (index, toggle)=>{\r\n        if(this.state.stockName === ''){\r\n            alert('Please enter stock name')\r\n        } else{\r\n            const stockName = this.state.stockName.toUpperCase();\r\n            const stockAmount = this.state.stockAmount;\r\n            let portfolios = this.state.portfolios;\r\n            axios\r\n                .get(\r\n                    `https://www.alphavantage.co/query?function=TIME_SERIES_INTRADAY&symbol=${\r\n                        stockName\r\n                    }&interval=1min&apikey=EVNDD17OHUNAZIMD&outputsize=compact`\r\n                ).then(res=>{\r\n                    const data = res.data['Time Series (1min)']\r\n                    const values = Object.values(data)\r\n                    const unitValue = values[0]['1. open']\r\n                    const total = Number.parseFloat(stockAmount * unitValue).toFixed(3)\r\n                    const totalValue = total\r\n                    const stock = {\r\n                        stockName,\r\n                        stockAmount,\r\n                        unitValue,\r\n                        totalValue,\r\n                    }\r\n                    portfolios[index].stocks.push(stock);\r\n                    this.setState({\r\n                        portfolios,\r\n                    })\r\n                }).catch(e=>alert('stock doesnot exist'))\r\n            this.setState({\r\n                stockName: '',\r\n                stockAmount: 1,\r\n            })\r\n            toggle()\r\n        }\r\n    }\r\n    //toggle the button name for displaying dollar and euro\r\n    toggleButton = (i)=>{\r\n        this.setState({\r\n            portfolios: update(this.state.portfolios, {\r\n                [i]: {\r\n                    isEuro: {$set: !this.state.portfolios[i].isEuro},\r\n                },\r\n            }),\r\n        })\r\n    }\r\n\r\n    //selects the stock from each portfolio and save for deletion\r\n    selectedStock = (stockName)=>{\r\n        const selectedStocks = this.state.selectedStocks;\r\n        if(selectedStocks.includes(stockName)){\r\n            const index = selectedStocks.indexOf(stockName);\r\n            selectedStocks.splice(index, 1);\r\n        } else{\r\n            selectedStocks.push(stockName);\r\n        }\r\n\r\n        this.setState({\r\n            selectedStocks,\r\n        })\r\n        \r\n    }\r\n    //removes selected stocks from each portfolio\r\n    removeSelectedStocks = (i)=>{\r\n        const stocks = this.state.portfolios[i].stocks;\r\n        const selectedStocks = this.state.selectedStocks;\r\n        const newStocks = stocks.filter(item=>!selectedStocks.includes(item.stockName))\r\n    \r\n        this.setState({\r\n            portfolios: update(this.state.portfolios, {\r\n                [i]: {\r\n                    stocks: {\r\n                        $set: newStocks,\r\n                    },\r\n                },\r\n            }),\r\n            selectedStocks: [],\r\n        })\r\n    }\r\n\r\n    //total values of each portfolio\r\n    countValue = (i)=>{\r\n        let value = [0];\r\n        let portfolio = this.state.portfolios[i]\r\n        portfolio.stocks.map(item=>value.push(Number(item.totalValue)))\r\n        if(portfolio.isEuro){\r\n            const totalValue = value.reduce((total, num)=>total + num)\r\n            return Number.parseFloat(totalValue).toFixed(3) + '$'\r\n        } else{\r\n            const totalValue = value.reduce((total, num)=>total + num) * this.state.exchangeRate;\r\n            return Number.parseFloat(totalValue).toFixed(3) + '€'\r\n        }\r\n        \r\n    }\r\n    render() {\r\n        const portfolios = this.state.portfolios.map((item, i)=>(\r\n            <Col xs=\"12\" lg=\"6\" key={i}>\r\n                <div className=\"portfolio-box\">\r\n                    <div className=\"portfolio-header\">\r\n                        <span className=\"portfolio-name\">{item.name}</span>\r\n                        <span><Button color=\"primary\" onClick={()=>this.toggleButton(i)}>{this.state.portfolios[i].isEuro ? 'Show in Euro' : 'Show in Dollar'}</Button></span>\r\n                        <span><Button \r\n                            color=\"danger\" \r\n                            style={{'borderRadius': '50%'}}\r\n                            onClick={()=>{if(window.confirm('Are you sure you want to delete this item?')) this.removePortfolio(i)}}>X</Button>\r\n                        </span>\r\n                    </div>\r\n                    <div className=\"portfolio-body\">\r\n                        <Table bordered>\r\n                            <thead>\r\n                                <tr>\r\n                                    <th>Stock</th>\r\n                                    <th>Amount</th>\r\n                                    <th>Unit Value</th>\r\n                                    <th>Total Value</th>\r\n                                    <th />\r\n                                </tr>\r\n                            </thead>\r\n                            {item.stocks.map((stockItem, i)=>(\r\n                                <tbody key={i}>\r\n                                    <tr>\r\n                                        <td>{stockItem.stockName}</td>\r\n                                        <td>{stockItem.stockAmount}</td>\r\n                                        <td>{item.isEuro ? \r\n                                            Number(stockItem.unitValue) + '$' : \r\n                                            Number.parseFloat(Number(stockItem.unitValue) * this.state.exchangeRate).toFixed(3) + '€'}\r\n                                        </td>\r\n                                        <td>{item.isEuro ? \r\n                                            Number(stockItem.totalValue) + '$' : \r\n                                            Number.parseFloat(Number(stockItem.totalValue) * this.state.exchangeRate).toFixed(3) + '€'}\r\n                                        </td>\r\n                                        <td><input type=\"checkbox\" onClick={()=>this.selectedStock(stockItem.stockName)} /></td>\r\n                                    </tr>\r\n                                </tbody>\r\n                            ))}\r\n                            \r\n                        </Table>\r\n                    </div>\r\n                    <p>Total Value: {this.countValue(i)}</p>\r\n                    <div className=\"portfolio-footer\">\r\n                        <Addstock \r\n                            stockName={this.state.stockName}\r\n                            stockAmount={this.state.stockAmount}\r\n                            handleStockName={this.handleStockName}\r\n                            addStock={this.addStock}\r\n                            index = {i}\r\n                        />\r\n                        <PortfolioChart id={i} portfolios={this.state.portfolios} />\r\n                        <span><Button color=\"danger\" onClick={()=>this.removeSelectedStocks(i)}>Remove Selected</Button></span>\r\n                    </div>\r\n                </div>\r\n            </Col>\r\n        ))\r\n        return (\r\n            <div>\r\n                <AddPortfolio\r\n                    portfolioName={this.state.portfolioName}\r\n                    handlePortfolioName={this.handlePortfolioName}\r\n                    createPortfolio={this.createPortfolio}\r\n                />\r\n                <Row>\r\n                    {portfolios}\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Portfolio\r\n","import React, {Component} from 'react'\nimport {Container} from 'reactstrap'\nimport Header from './components/Header'\nimport Portfolio from './components/Portfolio'\nimport './App.css'\n\nclass App extends Component {\n    render() {\n        return (\n            <div>\n                <Header />\n                <Container fluid>\n                    <Portfolio />\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App\n\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}